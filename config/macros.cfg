#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:

    BED_MESH_CLEAR
    CG28                 
    NOZZLE_SCRUB
    PERFORM_DOCK_ACTION dock_action=undock
    M106 S255           ;Turn on PF to keep probe cool
    M117 QGL
    QUAD_GANTRY_LEVEL
    G28
    CALIBRATE_Z
    M107                ;Turn that fan off!
    G0 Z10 F6000        ;Move up to avoid trigger
    PERFORM_DOCK_ACTION dock_action=dock
    CG28
    #G0 X207 Y305 F3600 
    G0 X150 Y150 Z20 F6000
   
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(110)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
    {% set SOAK_TIME = params.SOAK_TIME|default(20)|int %}
    {% set BED_MESH = params.BED_MESH|default(1)|int %}
    {% set MIN_CHAMBER_TEMP = params.MIN_CHAMBER_TEMP|default(0)|float %}
    
    M104 S{155}
    M190 S{BED_TEMP}

    G28
    G0 X150 Y5 Z60    ;Give the peasant time to manually clean nozzle
    G4 P60000         ;Wait 60 seconds

    {% if SOAK_TIME > 0 or MIN_CHAMBER_TEMP > 0 %}
        G0 Y150 Z30
        {% if SOAK_TIME > 0 %}
            LOG_INFO message="Pre-soak parameter set, pre-soaking for {SOAK_TIME} minute(s)."
            PRE_SOAK SOAK_TIME={SOAK_TIME}
        {% endif %}
        {% if MIN_CHAMBER_TEMP > 0 %}
            LOG_INFO message="Minimum chamber temp. parameter set, waiting for {MIN_CHAMBER_TEMP}C"
            TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_temp' MINIMUM={MIN_CHAMBER_TEMP}
        {% endif %}
    {% endif %}

    G32

    {% if BED_MESH|int == 1 %}
        LOG_INFO message="Loading or creating bed mesh for: {BED_TEMP}C"
        {% if SOAK_TIME > 19 %}
            BED_MESH_LOAD_TEMP TEMP={BED_TEMP}
        {% else %}
            BED_MESH_LOAD_TEMP TEMP={BED_TEMP} WAIT_TIME=20
        {% endif %}
    {% else %}
        BED_MESH_CLEAR
    {% endif %}

    G0 X5 Y5 Z20 F9000  

    SET_FAN_SPEED FAN=exhaust_fan SPEED=1
    M109 S{EXTRUDER_TEMP}
    G92 E0;    
    G90   
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G1 F9000
    M117 Printing..

[gcode_macro PRE_SOAK]
gcode:
    {% set SOAK_TIME = params.SOAK_TIME|default(20)|int %}
    M117 Starting Soak
    M106 S255 #Turn on PF to help warm up chamber
    G0 X150 Y150 Z10 F6000
    {% for timer in range( SOAK_TIME|int,0,-1) %}
        #we cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
        M117 Soak: {timer|int}m remaining
        M105
        G4 P60000
    {% endfor %}
   M107
   M117 Soak Complete                   
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    G1 Z20 F3000                    ; move nozzle up 20mm
    G90                            ; absolute positioning
    G0  X150 Y250 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    G4 P120000                      ; run fan for two minutes to de-voc
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
    M107                           ; turn off part fan
    RUN_SHELL_COMMAND CMD=send_pushover_print_complete
    M117 Print Complete

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    CG28
    M117 Z-Calibration.
    _SET_LOWER_STEPPER_CURRENT  # I lower the stepper current for homing and probing 
    PERFORM_DOCK_ACTION dock_action=undock        # a macro for fetching the probe first
    BASE_CALIBRATE_Z
    _RESET_STEPPER_CURRENT      # resetting the stepper current
    G0 Z10 F6000        ;Move up to avoid trigger
    PERFORM_DOCK_ACTION dock_action=dock           # and parking it afterwards
    M117 Z-Calibration Complete.

[gcode_macro PERFORM_DOCK_ACTION]
default_parameter_dock_action:
gcode:
    LOG_INFO message="Performing docking action with action: {params.DOCK_ACTION}"
    QUERY_PROBE
    {% if params.DOCK_ACTION == 'dock' %}
        PROBE_DOCK
        QUERY_PROBE
        VERIFY_PROBE_ACTION ACTION=dock
    {% elif params.DOCK_ACTION == 'undock' %}
        PROBE_UNDOCK
        QUERY_PROBE
        VERIFY_PROBE_ACTION ACTION=undock
    {% endif %}

[gcode_macro PROBE_UNDOCK]
gcode:
    {% set is_docked = printer.probe.last_query %}
    LOG_INFO message="Dock status: {is_docked}"
    {% if is_docked == 1 %}
        LOG_INFO message="Commencing undock routine"
        SAVE_GCODE_STATE name=_undockProbe
        CG28
        SET_GCODE_OFFSET Z=0
        G1 Z25 F1800
        G1 X258.5 Y285 F10000 #Make sure this works for you
        G1 Z10.4 F1800
        G1 Y307 F1800
        G1 Y280 F3600   
        G1 Z25 F1800
        G0 X150 Y150 F10000
        RESTORE_GCODE_STATE name=_undockProbe
    {% else %}
        LOG_INFO message="Skipping undock routine as probe is already undocked."
    {% endif %}

[gcode_macro PROBE_DOCK]
gcode:
    {% set is_docked = printer.probe.last_query %}
    LOG_INFO message="Dock status: {is_docked}"
    {% if is_docked == 0 %}
        SAVE_GCODE_STATE name=_dockProbe
        SET_GCODE_OFFSET Z=0
        CG28
        G1 Z25 F1800
        G1 X258.5 Y285 F10000 #Make sure this works for you
        G1 Z12.10 F1800
        G1 Y306.5 F3000
        G1 X150 F10000
        G1 Z35 F1200
        G0 X150 Y150 F10000
        RESTORE_GCODE_STATE name=_dockProbe
    {% else %}
        LOG_INFO message="Skipping dock routine as probe is already docked."
    {% endif %}

[gcode_macro VERIFY_PROBE_ACTION]
default_parameter_action:    
gcode:
    {% set triggered = printer.probe.last_query %}                   ;1 = triggered 0 = open aka attached
    # check if probe fails to attach/detach
    {% if not triggered %}
        {% if params.ACTION == 'dock' %}
            { action_raise_error("Probe dock failed!") }
        {% elif params.ACTION == 'undock' %} 
            LOG_INFO message="Probe undock successful"
        {% endif %}
    {% elif triggered %}
        {% if params.ACTION == 'undock' %}
            { action_raise_error("Probe undock failed!") }
        {% elif params.ACTION == 'dock' %}
            LOG_INFO message="Probe dock successful"
        {% endif %}
    {% endif %}

[gcode_macro LOG_INFO]
default_parameter_message:
gcode:
  {action_respond_info(params.MESSAGE)}

[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_X: 150    #edit to your park position
default_parameter_Y: 300    #edit to your park position
default_parameter_Z: 20     #edit to your park position
default_parameter_E: 1      #edit to your retract length
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
default_parameter_E: 1      #edit to your retract length
gcode:
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro NOZZLE_SCRUB]
gcode:
    G1 X95 Y308 F9000
    G1 Z4
    G1 X60 Y308 F9000
    G1 X95 Y308 F9000
    G1 X60 Y308 F9000
    G1 X95 Y308 F9000
    G1 X60 Y308 F9000
    G1 X95 Y308 F9000
    G1 X60 Y308 F9000
    G1 X95 Y308 F9000
    
    G1 Z10
    

[gcode_macro GEN_A_MESH]
gcode:
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    G28

[gcode_macro _SET_LOWER_STEPPER_CURRENT]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.5
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.5
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.5
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.5

[gcode_macro _RESET_STEPPER_CURRENT]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"]} HOLDCURRENT={ printer.configfile.config["tmc2209 stepper_z"]["hold_current"]}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"]} HOLDCURRENT={ printer.configfile.config["tmc2209 stepper_z"]["hold_current"]}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"]} HOLDCURRENT={ printer.configfile.config["tmc2209 stepper_z"]["hold_current"]}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"]} HOLDCURRENT={ printer.configfile.config["tmc2209 stepper_z"]["hold_current"]}

[gcode_macro _SET_ACC]
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int * 2 / 3 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}

  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}

[gcode_shell_command backup_config]
command: sh /home/pi/backupconfig/backup_config.sh
timeout: 30.
verbose: True

[gcode_shell_command send_pushover_print_complete]
command: sh /home/pi/backupconfig/VoronConfig/push_pushover.sh 'v2.1214 notification' 'Print complete'
timeout: 30.
verbose: True

[gcode_shell_command pushover_filament_runout]
command: sh /home/pi/backupconfig/VoronConfig/push_pushover.sh 'v2.1214 notification' 'Filament runout detected'
timeout: 30.
verbose: True

[gcode_macro BACKUP_CONFIG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_config

[gcode_macro BED_MESH_TEMP]
default_parameter_TEMP: 0
default_parameter_FORCE: 0
default_parameter_WAIT_TIME: 0
gcode:
    {% if TEMP|int < 30 %}
        {action_respond_info("TEMP is a required parameter!")}
    {% else %}
        {% if printer.configfile.config["bed_mesh temp_" + TEMP] is not defined or FORCE|int == 1 %}
            LOG_INFO message="No bed mesh found for temp: {TEMP}C generating one now."
            LOG_INFO message="Being forced? {FORCE}"
            M190 S{TEMP}           ; wait for bed temp
            ; Run QGL/home at new temp, both to validate we're still leveled at the new
            ; temp, but also to give the temp a bit to soak.
            {% for timer in range( WAIT_TIME|int,0,-1) %}
                M117 Soak: {timer|int}m remaining
                M105
                G4 P60000
            {% endfor %}
            G32
            BED_MESH_CLEAR
            PERFORM_DOCK_ACTION dock_action=undock
            BED_MESH_CALIBRATE
            PERFORM_DOCK_ACTION dock_action=dock
            BED_MESH_PROFILE SAVE=temp_{TEMP}
            SAVE_CONFIG
        {% endif %}
    {% endif %}

[gcode_macro BED_MESH_LOAD_TEMP]
default_parameter_TEMP: 0
default_parameter_FORCE: 0
default_parameter_WAIT_TIME: 0
gcode:
    BED_MESH_TEMP TEMP={TEMP} FORCE={FORCE} WAIT_TIME={WAIT_TIME}
    BED_MESH_PROFILE LOAD=temp_{TEMP}

[gcode_macro TEST_MACRO]
default_parameter_TEMP: 0
gcode:
    {% if printer.configfile.config["bed_mesh temp_" + TEMP] is not defined %}
        LOG_INFO message="bed_mesh temp_{TEMP} is not found"
    {% endif %}
